name: Go

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24

      - name: Get version (tag or time)
        id: version
        run: |
          TAG=$(git describe --tags --exact-match 2>/dev/null || true)
          if [ -n "$TAG" ]; then
            VERSION="$TAG"
          else
            VERSION=$(TZ='Asia/Shanghai' date +'%Y%m%d%H%M%S')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Extract and Normalize Variables
        run: |
          echo "REPO_OWNER=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.API_TOKEN }}

      - name: Prepare cache dirs
        run: |
          mkdir -p ~/.cache/go-build
          mkdir -p ~/go/pkg/mod

      - name: Module cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-go

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1 docker build \
          --secret id=api_token,env=API_TOKEN \
          -t ghcr.io/${{ env.REPO_OWNER }}/kratos-layout:${{ env.VERSION }} \
          -t ghcr.io/${{ env.REPO_OWNER }}/kratos-layout:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ env.REPO_OWNER }}/kratos-layout:${{ env.VERSION }}
          docker push ghcr.io/${{ env.REPO_OWNER }}/kratos-layout:latest